package com.example;

import java.util.Scanner;

/**
 * Created by AiYeSus on 12/4/2017.
 */

public class FindSquareNumbers {

    public static int numOfSQ(int st, int ed) {
        int count=0;
        int sq = 0;
        double sqrt = 0.0;
        sqrt = Math.sqrt(st);
        if ( (sqrt - (int)sqrt) > 0)
            sq = (int)sqrt + 1;
        else
            sq = (int)sqrt;

        while(( sq * sq ) <= ed) {
             count++;
             sq++;
        }
        return count;
    }

    public static int numOfSQTimeOut(int st, int ed) {
        int count=0;
        int sq = 0;
        double sqrt = 0.0;
        for(int i=st; i<=ed; i++) {
            sqrt = Math.sqrt(i);
            sq = (int)sqrt;
            if ((sqrt - sq) > 0) count++;
        }
        return count;
    }

    public static void main(String[] args) {
        /* Find # of square number between start and end. */
        /* First line : number of TC */
        /* TC line : Contain 2 space separated number for start and end */
        Scanner in = new Scanner(System.in);
        int nTC = in.nextInt();
        int start, end;
        for(int i=0; i<nTC; i++) {
            start = in.nextInt();
            end = in.nextInt();
            System.out.println( numOfSQ(start ,end) );
        }
    }
}

/**
 *
 * 100
 178809602 330598161
 284829997 636760792
 344808647 444776424
 100052345 224762469
 135964528 323753587
 39291449 559351301
 52473344 942520592
 330086042 478166110
 1541214 809501009
 212740429 544403465
 136770831 380045099
 291728532 891818738
 248092107 751176696
 380425762 995983727
 412458781 600477969
 199521649 361172651
 487742886 928846721
 2793360 318714114
 77956446 478438091
 321525887 883319022
 12535827 236927139
 373002955 770808196
 398509385 492962322
 470777646 582250063
 15153465 734502013
 4885005 906034736
 107549593 123356602
 250615970 468339913
 259476183 894143747
 106025696 255420649
 388124067 448373244
 50709281 196855068
 162806076 455454195
 287343635 912603929
 303158134 788385560
 256639036 754419940
 367943819 607644287
 381957927 655331283
 471746866 930213979
 250648623 311984735
 150740226 412449237
 193586803 571100079
 75180745 140449236
 311049294 923960705
 339682336 629630538
 228600085 644917693
 256332127 702519919
 363346752 408942035
 320100190 373208070
 331011695 542990199
 490570426 527524052
 349624396 456360276
 219513026 402475931
 313231760 815685170
 259648648 837933061
 129822436 185568758
 273179011 425414784
 379046828 791560378
 304464126 420683262
 51813532 259589796
 94043642 876512745
 348182861 880593927
 96042445 257190078
 432945361 647811748
 350087597 642105441
 338458756 506321287
 377024351 652995935
 279749193 980454682
 133528635 307843753
 89070718 551309205
 322935141 559571910
 126249910 824468926
 27979255 857603727
 282171297 996352189
 457019288 682681921
 388167161 719734457
 275636159 615501930
 145761215 684997000
 406543636 559553384
 495142060 777270478
 303390079 497423761
 194200416 938071125
 125973763 897927168
 5129166 766319644
 484744047 634469864
 340330567 527082529
 162737719 286851182
 185243440 786362457
 271818790 589840366
 314198239 453851518
 257482994 452677160
 451464412 516618779
 3905781 834256531
 146878082 693811315
 403045340 807415272
 15549444 436306501
 463407833 841993322
 379667417 633584126
 287995670 678169556
 443039533 499976473

 Expected:
 4811
 8358
 2520
 4990
 6333
 17382
 23457
 3699
 27210
 8747
 7800
 12783
 11657
 12055
 4195
 4879
 8392
 16181
 13044
 11789
 11852
 8450
 2240
 2432
 23209
 27890
 736
 5811
 13794
 5685
 1474
 6909
 8582
 13258
 10667
 11447
 5469
 6056
 8780
 1832
 8031
 9984
 3181
 12760
 6662
 10276
 10495
 1161
 1427
 5109
 819
 2664
 5246
 10862
 12834
 2229
 4097
 8665
 3062
 8913
 19908
 11015
 6237
 4645
 6629
 4104
 6136
 14587
 5990
 14042
 5685
 17477
 23995
 14768
 4750
 7126
 8207
 14099
 3492
 5628
 4884
 16692
 18742
 25418
 3172
 4510
 4180
 14432
 7800
 3578
 5230
 1482
 26907
 14221
 8340
 16944
 7491
 5686
 9071
 1312
 */
